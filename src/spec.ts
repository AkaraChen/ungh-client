/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/repos/{owner}/{name}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get GitHub repository information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                    name: components['parameters']['name'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RepoInfo'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/repos/{owner}/{name}/contributors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get repository contributors */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                    name: components['parameters']['name'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Contributors'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/repos/{owner}/{name}/files/{branch}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get repository files tree on specific branch */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                    name: components['parameters']['name'];
                    branch: components['parameters']['branch'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['FilesTree'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/repos/{owner}/{name}/files/{branch}/{path}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get file contents from a repository */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                    name: components['parameters']['name'];
                    branch: components['parameters']['branch'];
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['FileContents'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/repos/{owner}/{name}/readme': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get repository readme file on main branch */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                    name: components['parameters']['name'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Readme'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/repos/{owner}/{name}/releases': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get repository releases */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                    name: components['parameters']['name'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Releases'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/repos/{owner}/{name}/releases/latest': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get latest repository release */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                    name: components['parameters']['name'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['LatestRelease'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/repos/{owner}/{name}/branches': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all the branches of a repository */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                    name: components['parameters']['name'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Branches'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/orgs/{owner}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get GitHub organization information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['OrgInfo'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/orgs/{owner}/repos': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get GitHub organization repositories overview */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    owner: components['parameters']['owner'];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['OrgRepos'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/stars/{repos}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get star information for one or more repositories or organizations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Comma-separated list of repositories or organizations */
                    repos: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Stars'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/{username}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find one GitHub user by username */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['User'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/{username}/repos': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user repositories */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['UserRepos'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/find/{query}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find one GitHub user by email or other query */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    query: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['User'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RepoInfo: {
            repo?: {
                id?: number;
                name?: string;
                repo?: string;
                description?: string | null;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                pushedAt?: string;
                stars?: number;
                watchers?: number;
                forks?: number;
                defaultBranch?: string;
            };
        };
        Contributors: {
            contributors?: {
                id?: number;
                username?: string;
                contributions?: number;
            }[];
        };
        FilesTree: {
            meta?: {
                sha?: string;
            };
            files?: {
                path?: string;
                mode?: string;
                sha?: string;
                size?: number;
            }[];
        };
        FileContents: {
            meta?: {
                url?: string;
            };
            file?: {
                contents?: string;
                html?: string;
            };
        };
        Readme: {
            html?: string;
            markdown?: string;
        };
        Releases: {
            releases?: components['schemas']['Release'][];
        };
        LatestRelease: {
            release?: components['schemas']['Release'];
        };
        Release: {
            id?: number;
            tag?: string;
            author?: string;
            name?: string;
            draft?: boolean;
            prerelease?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            markdown?: string;
            html?: string;
        };
        Branches: {
            branches?: {
                name?: string;
                commit?: {
                    sha?: string;
                    url?: string;
                };
                protected?: boolean;
            }[];
        };
        OrgInfo: {
            org?: {
                id?: number;
                name?: string | null;
                description?: string | null;
            };
        };
        OrgRepos: {
            repos?: components['schemas']['RepoSummary'][];
        };
        Stars: {
            totalStars?: number;
            stars?: {
                [key: string]: number;
            };
        };
        User: {
            user?: {
                id?: number;
                name?: string | null;
                twitter?: string | null;
                username?: string;
            };
        };
        UserRepos: {
            repos?: components['schemas']['RepoSummary'][];
        };
        RepoSummary: {
            id?: number;
            name?: string;
            description?: string | null;
            repo?: string;
            stars?: number;
            /** Format: date-time */
            pushedAt?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            watchers?: number;
            forks?: number;
            defaultBranch?: string;
        };
    };
    responses: never;
    parameters: {
        owner: string;
        name: string;
        branch: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
